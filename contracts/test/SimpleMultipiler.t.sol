// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/console.sol";

import {Test, console} from "forge-std/Test.sol";
import {PlonkVerifier} from "../src/Verifier.sol";
import {SimpleMultiplier} from "../src/SimpleMultipiler.sol";

contract SimpleMultiplierTest is Test {
    PlonkVerifier public verifier;
    SimpleMultiplier public simpleMultiplier;

    uint[1] public publicSignals = [
        0x00000000000000000000000000000000000000000000000000000000000000d2
    ];

    uint256[2] public a = [
        7066258222401581164388559904744292071965847577728771717318952709593710222798,
        14477541920143585171163781984328997619595895324533156288662377612204379723579
    ];

    uint256[2] public b = [
        13851788919313775584004777461219174387897729527947131500173912917873923582605,
        2871656710761332626641182369600989519178900809370481936213507515366820102511
    ];

    uint256[2] public c = [
        7387066761365749361938086033944888114166528388336621280701287641060575509425,
        9290815198223582444967571044702305318136540040772704285701779647328564329115
    ];
    uint256[2] public z = [
        16600855711919161083319566804284201847345412714437393251024215135776189036582,
        11093588167046049893595065392319090396056023438007666620275169200683982839829
    ];

    uint256[2] public t1 = [
        7731608601882316388919589280787741968823584220136493383996485670117871605851,
        2313662776794186974864484528510387564214961285721449953717813636668050203754
    ];

    uint256[2] public t2 = [
        17203072052184149910211938127762276905850504387387347406975371900456801952628,
        13800214767135924337431054475341163250329275604128927902414094910354406761695
    ];

    uint256[2] public t3 = [
        21563738048100219543898765004708453209571733793985832922053858001139778758423,
        6531549381528233379335388102921187396089462816684822083394708332763571178517
    ];

    uint256[2] public wxi = [
        9685278611223305423169929304758953650550564617982907960716052025295264988340,
        21521909364272001156804227449619529252218561743393630559065764737288164868901
    ];
    uint256[2] public wxiw = [
        4363314827070434404868554688731749092893026657685294657138236865262940847310,
        21044836411538177136847460814326986295513799149565023530106980656745495723586
    ];

    uint256[1] public eval_a = [
        8851076804637265110650291448997318090483187471305053116220973729392493479769
    ];
    uint256[1] public eval_b = [
        747409309359099659265886914782192542375690749321425468320078791858609822348
    ];
    uint256[1] public eval_c = [
        18695591701895061567550069810951252497372319219845603957120534909809647887742
    ];

    uint256[1] public eval_s1 = [
        6047003622101664302948191264373388899098553871168518747988258774222039154089
    ];
    uint256[1] public eval_s2 = [
        15605440351315403007669886724779236728129029917137452774968867137095430213393
    ];

    uint256[1] public eval_zw = [
        7561861773693988390334149920054132654215265192305838760573961731541471284169
    ];

    function setUp() public {
        verifier = new PlonkVerifier();
        simpleMultiplier = new SimpleMultiplier(address(verifier));
    }

    function testSimpleMultiplier() public {
        // proof from snarkjs

        bytes memory proof1 = abi.encode(
            a,
            b,
            c,
            z,
            t1,
            t2,
            t3,
            wxi,
            wxiw,
            eval_a,
            eval_b,
            eval_c
        );

        bytes memory proof2 = abi.encode(eval_s1, eval_s2, eval_zw);

        bytes memory combinedProof = abi.encodePacked(proof1, proof2);

        console.logBytes(combinedProof);

        // expect
        // ["0x0f9f5c449bd8af49d2a6640df6fff9bfd430d581b298f00164b24f6e428c5dce", "0x2001ff935ecd01f8c84faef5bf8fb455a14e16c6b74708d80c7091360d7fd73b","0x1e9fd5ae934f11e5b410f2909af9f336d48c1bb9981ae40294f46a027a65ea8d","0x06594cd3579998a8ed431ec5c13fe5090bfcae55aefc874c376b8308d591416f","0x1054ee7eaaffb84b680b50ed2a2313f7e2bfb5f85a841bd85cb393cb2f3f7bb1","0x148a6a40c8111887190de4904596a651d15e233430484681f3416eafea1cba9b","0x24b3c059221ca5f6bdcc4e6053bad834bc6cbe6b37f2343d8a0078f4e779b826","0x1886bf969fbebaca503eedfb4061a8c25470d7ab82e74b13578d3f62d678e015","0x1117ef75cedf6ba5c12cef30eec1ab692af8c508d34c23af19666eeec532585b","0x051d7c9a05e455d074435326715003292ae02115a219a1b015ec6506bd11646a","0x260897feaab39ee4f516333b1b52c34877d27b6adda8e0a75d29342306186374","0x1e82a50ef35fbb84e2ec4c00d07847ac00eb904535264e4f234d6e190263e4df","0x2faca4a9ff8dc61fd7ebc14b6c2bbc3cbacebc04962086d3547e59693d58a717","0x0e70b9d76513acc048f1c564f6facd646136e3045a075bdb2fe39b92e7364c15","0x1569ac65f56de51101483db64c109145a60c5fd41504a41f47924dbd9a4abcb4","0x2f94f811e28c077ecca88b14b7d20316ebb5181048fc9414d5fe8ae5c5540325","0x09a58c75f08687e2306c72ffc31c2e0959c93bf8c7b8b0ffc6772f3e23bffcce","0x2e86f48e94317c2cae3790f936dfb37b42d8d6f99884022a3f68ca0a3784fe42","0x1391882d3d5b37a9631a5fa73bb1b1cf1f767866718edecc1c636e026a5e4759","0x01a704c812d4b428a1b40d5b088074317dc90eb3bb8d66fa977958b3d2219a8c","0x295554755068c72c8afd0ec8843d73fa6a97bd06189f580bfa6b79e9bcef257e","0x0d5e7b9648856fe1f61ad5e9ea8e934d4f8d9e690a528d68a4c2d089167bfda9","0x22805dc15a54398cfaba608d947bff4d2a00fd149719924ac07d1b99c68e8f11","0x10b7dcb2042ec01a7280096b3cc749cddb11b8171192b02fce6fbe2fd6834bc9"]["0x00000000000000000000000000000000000000000000000000000000000000d2"]

        // bytes memory proof = abi.encode(
        // [
        //     "0x0f9f5c449bd8af49d2a6640df6fff9bfd430d581b298f00164b24f6e428c5dce",
        //     "0x2001ff935ecd01f8c84faef5bf8fb455a14e16c6b74708d80c7091360d7fd73b",
        //     "0x1e9fd5ae934f11e5b410f2909af9f336d48c1bb9981ae40294f46a027a65ea8d",
        //     "0x06594cd3579998a8ed431ec5c13fe5090bfcae55aefc874c376b8308d591416f",
        //     "0x1054ee7eaaffb84b680b50ed2a2313f7e2bfb5f85a841bd85cb393cb2f3f7bb1",
        //     "0x148a6a40c8111887190de4904596a651d15e233430484681f3416eafea1cba9b",
        //     "0x24b3c059221ca5f6bdcc4e6053bad834bc6cbe6b37f2343d8a0078f4e779b826",
        //     "0x1886bf969fbebaca503eedfb4061a8c25470d7ab82e74b13578d3f62d678e015",
        //     "0x1117ef75cedf6ba5c12cef30eec1ab692af8c508d34c23af19666eeec532585b",
        //     "0x051d7c9a05e455d074435326715003292ae02115a219a1b015ec6506bd11646a",
        //     "0x260897feaab39ee4f516333b1b52c34877d27b6adda8e0a75d29342306186374",
        //     "0x1e82a50ef35fbb84e2ec4c00d07847ac00eb904535264e4f234d6e190263e4df",
        //     "0x2faca4a9ff8dc61fd7ebc14b6c2bbc3cbacebc04962086d3547e59693d58a717",
        //     "0x0e70b9d76513acc048f1c564f6facd646136e3045a075bdb2fe39b92e7364c15",
        //     "0x1569ac65f56de51101483db64c109145a60c5fd41504a41f47924dbd9a4abcb4",
        //     "0x2f94f811e28c077ecca88b14b7d20316ebb5181048fc9414d5fe8ae5c5540325",
        //     "0x09a58c75f08687e2306c72ffc31c2e0959c93bf8c7b8b0ffc6772f3e23bffcce",
        //     "0x2e86f48e94317c2cae3790f936dfb37b42d8d6f99884022a3f68ca0a3784fe42",
        //     "0x1391882d3d5b37a9631a5fa73bb1b1cf1f767866718edecc1c636e026a5e4759",
        //     "0x01a704c812d4b428a1b40d5b088074317dc90eb3bb8d66fa977958b3d2219a8c",
        //     "0x295554755068c72c8afd0ec8843d73fa6a97bd06189f580bfa6b79e9bcef257e",
        //     "0x0d5e7b9648856fe1f61ad5e9ea8e934d4f8d9e690a528d68a4c2d089167bfda9",
        //     "0x22805dc15a54398cfaba608d947bff4d2a00fd149719924ac07d1b99c68e8f11",
        //     "0x10b7dcb2042ec01a7280096b3cc749cddb11b8171192b02fce6fbe2fd6834bc9"
        // ]
        // );
        // bool result = simpleMultiplier.submitProof(proof, publicSignals);

        // console.logBool(result);
    }
}
